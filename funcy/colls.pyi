from _typeshed import Incomplete
from collections.abc import Generator

__all__ = ['empty', 'iteritems', 'itervalues', 'join', 'merge', 'join_with', 'merge_with', 'walk', 'walk_keys', 'walk_values', 'select', 'select_keys', 'select_values', 'compact', 'is_distinct', 'all', 'any', 'none', 'one', 'some', 'zipdict', 'flip', 'project', 'omit', 'zip_values', 'zip_dicts', 'where', 'pluck', 'pluck_attr', 'invoke', 'lwhere', 'lpluck', 'lpluck_attr', 'linvoke', 'get_in', 'get_lax', 'set_in', 'update_in', 'del_in', 'has_path']

def empty(coll): ...
def iteritems(coll): ...
def itervalues(coll): ...
def join(colls): ...
def merge(*colls): ...
def join_with(f, dicts, strict: bool = False): ...
def merge_with(f, *dicts): ...
def walk(f, coll): ...
def walk_keys(f, coll): ...
def walk_values(f, coll): ...
def select(pred, coll): ...
def select_keys(pred, coll): ...
def select_values(pred, coll): ...
def compact(coll): ...
def is_distinct(coll, key=...): ...
def all(pred, seq=...): ...
def any(pred, seq=...): ...
def none(pred, seq=...): ...
def one(pred, seq=...): ...
def some(pred, seq=...): ...
def zipdict(keys, vals): ...
def flip(mapping): ...
def project(mapping, keys): ...
def omit(mapping, keys): ...
def zip_values(*dicts) -> Generator[Incomplete, None, None]: ...
def zip_dicts(*dicts) -> Generator[Incomplete, None, None]: ...
def get_in(coll, path, default: Incomplete | None = None): ...
def get_lax(coll, path, default: Incomplete | None = None): ...
def set_in(coll, path, value): ...
def update_in(coll, path, update, default: Incomplete | None = None): ...
def del_in(coll, path): ...
def has_path(coll, path): ...
def lwhere(mappings, **cond): ...
def lpluck(key, mappings): ...
def lpluck_attr(attr, objects): ...
def linvoke(objects, name, *args, **kwargs): ...
def where(mappings, **cond): ...
def pluck(key, mappings): ...
def pluck_attr(attr, objects): ...
def invoke(objects, name, *args, **kwargs): ...
