from _typeshed import Incomplete

__all__ = ['memoize', 'make_lookuper', 'silent_lookuper', 'cache']

class SkipMemory(Exception): ...

def memoize(_func: Incomplete | None = None, *, key_func: Incomplete | None = None): ...
def cache(timeout, *, key_func: Incomplete | None = None): ...

class CacheMemory(dict):
    timeout: Incomplete
    def __init__(self, timeout) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def __getitem__(self, key): ...
    def expire(self) -> None: ...
    def clear(self) -> None: ...

make_lookuper: Incomplete
silent_lookuper: Incomplete
