from _typeshed import Incomplete
from collections.abc import Generator
from itertools import accumulate as accumulate, chain as chain, count as count, cycle as cycle, repeat as repeat

__all__ = ['count', 'cycle', 'repeat', 'repeatedly', 'iterate', 'take', 'drop', 'first', 'second', 'nth', 'last', 'rest', 'butlast', 'ilen', 'map', 'filter', 'lmap', 'lfilter', 'remove', 'lremove', 'keep', 'lkeep', 'without', 'lwithout', 'concat', 'lconcat', 'chain', 'cat', 'lcat', 'flatten', 'lflatten', 'mapcat', 'lmapcat', 'interleave', 'interpose', 'distinct', 'ldistinct', 'dropwhile', 'takewhile', 'split', 'lsplit', 'split_at', 'lsplit_at', 'split_by', 'lsplit_by', 'group_by', 'group_by_keys', 'group_values', 'count_by', 'count_reps', 'partition', 'lpartition', 'chunks', 'lchunks', 'partition_by', 'lpartition_by', 'with_prev', 'with_next', 'pairwise', 'lzip', 'reductions', 'lreductions', 'sums', 'lsums', 'accumulate']

def repeatedly(f, n=...): ...
def iterate(f, x) -> Generator[Incomplete, None, None]: ...
def take(n, seq): ...
def drop(n, seq): ...
def first(seq): ...
def second(seq): ...
def nth(n, seq): ...
def last(seq): ...
def rest(seq): ...
def butlast(seq) -> Generator[Incomplete, None, None]: ...
def ilen(seq): ...
def lmap(f, *seqs): ...
def lfilter(pred, seq): ...
def map(f, *seqs): ...
def filter(pred, seq): ...
def lremove(pred, seq): ...
def remove(pred, seq): ...
def lkeep(f, seq=...): ...
def keep(f, seq=...): ...
def without(seq, *items) -> Generator[Incomplete, None, None]: ...
def lwithout(seq, *items): ...
def lconcat(*seqs): ...
concat = chain

def lcat(seqs): ...

cat: Incomplete

def flatten(seq, follow=...) -> Generator[Incomplete, Incomplete, None]: ...
def lflatten(seq, follow=...): ...
def lmapcat(f, *seqs): ...
def mapcat(f, *seqs): ...
def interleave(*seqs): ...
def interpose(sep, seq): ...
def takewhile(pred, seq=...): ...
def dropwhile(pred, seq=...): ...
def ldistinct(seq, key=...): ...
def distinct(seq, key=...) -> Generator[Incomplete, None, None]: ...
def split(pred, seq): ...
def lsplit(pred, seq): ...
def split_at(n, seq): ...
def lsplit_at(n, seq): ...
def split_by(pred, seq): ...
def lsplit_by(pred, seq): ...
def group_by(f, seq): ...
def group_by_keys(get_keys, seq): ...
def group_values(seq): ...
def count_by(f, seq): ...
def count_reps(seq): ...
def partition(n, step, seq=...): ...
def lpartition(n, step, seq=...): ...
def chunks(n, step, seq=...): ...
def lchunks(n, step, seq=...): ...
def partition_by(f, seq) -> Generator[Incomplete, None, None]: ...
def lpartition_by(f, seq): ...
def with_prev(seq, fill: Incomplete | None = None): ...
def with_next(seq, fill: Incomplete | None = None): ...
def pairwise(seq): ...
def lzip(*seqs, strict: bool = False): ...
def reductions(f, seq, acc=...): ...
def lreductions(f, seq, acc=...): ...
def sums(seq, acc=...): ...
def lsums(seq, acc=...): ...
