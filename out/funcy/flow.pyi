from _typeshed import Incomplete
from collections.abc import Generator
from contextlib import nullcontext as nullcontext, suppress as suppress

__all__ = ['raiser', 'ignore', 'silent', 'suppress', 'nullcontext', 'reraise', 'retry', 'fallback', 'limit_error_rate', 'ErrorRateExceeded', 'throttle', 'post_processing', 'collecting', 'joining', 'once', 'once_per', 'once_per_args', 'wrap_with']

def raiser(exception_or_class=..., *args, **kwargs): ...
def ignore(errors, default: Incomplete | None = None): ...
def silent(func): ...

class nullcontext:
    enter_result: Incomplete
    def __init__(self, enter_result: Incomplete | None = None) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *excinfo) -> None: ...

def reraise(errors, into) -> Generator[None, None, None]: ...
def retry(call, tries, errors=..., timeout: int = 0, filter_errors: Incomplete | None = None): ...
def fallback(*approaches): ...

class ErrorRateExceeded(Exception): ...

def limit_error_rate(fails, timeout, exception=...): ...
def throttle(period): ...
def post_processing(call, func): ...

collecting: Incomplete

def joining(call, sep): ...
def once_per(*argnames): ...

once: Incomplete

def once_per_args(func): ...
def wrap_with(call, ctx): ...
