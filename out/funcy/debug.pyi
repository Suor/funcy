from _typeshed import Incomplete
from collections.abc import Generator

__all__ = ['tap', 'log_calls', 'print_calls', 'log_enters', 'print_enters', 'log_exits', 'print_exits', 'log_errors', 'print_errors', 'log_durations', 'print_durations', 'log_iter_durations', 'print_iter_durations']

def tap(x, label: Incomplete | None = None): ...
def log_calls(call, print_func, errors: bool = True, stack: bool = True, repr_len=...): ...
def print_calls(errors: bool = True, stack: bool = True, repr_len=...): ...
def log_enters(call, print_func, repr_len=...): ...
def print_enters(repr_len=...): ...
def log_exits(call, print_func, errors: bool = True, stack: bool = True, repr_len=...): ...
def print_exits(errors: bool = True, stack: bool = True, repr_len=...): ...

class LabeledContextDecorator:
    print_func: Incomplete
    label: Incomplete
    repr_len: Incomplete
    def __init__(self, print_func, label: Incomplete | None = None, repr_len=...) -> None: ...
    def __call__(self, label: Incomplete | None = None, **kwargs): ...
    def decorator(self, func): ...

class log_errors(LabeledContextDecorator):
    stack: Incomplete
    def __init__(self, print_func, label: Incomplete | None = None, stack: bool = True, repr_len=...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, tb: types.TracebackType | None) -> None: ...

print_errors: Incomplete

class log_durations(LabeledContextDecorator):
    format_time: Incomplete
    threshold: Incomplete
    def __init__(self, print_func, label: Incomplete | None = None, unit: str = 'auto', threshold: int = -1, repr_len=...) -> None: ...
    start: Incomplete
    def __enter__(self): ...
    def __exit__(self, *exc) -> None: ...

print_durations: Incomplete

def log_iter_durations(seq, print_func, label: Incomplete | None = None, unit: str = 'auto') -> Generator[Incomplete, None, None]: ...
def print_iter_durations(seq, label: Incomplete | None = None, unit: str = 'auto'): ...
